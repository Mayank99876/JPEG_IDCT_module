module IDCT_1D (
    input clk,
    input rst,
    input wire signed [15:0] coeff [0:7],  
    output logic signed [15:0] row_out [0:7],
    output logic done  
);

    reg signed [15:0] cos_lut [0:7][0:7];

    initial begin
       cos_lut[0] = '{8192, 8192, 8192, 8192, 8192, 8192, 8192, 8192};
       cos_lut[1] = '{11024, 8035, 3784, -1836, -1836, 3784, 8035, 11024};
       cos_lut[2] = '{9632, 3784, -9633, 3784, 3784, -9633, 3784, 9632};
       cos_lut[3] = '{8035, -1836, 11024, 3784, 3784, 11024, -1836, 8035};
       cos_lut[4] = '{6726, -6726, -6726, 6726, 6726, -6726, -6726, 6726};
       cos_lut[5] = '{3784, -1836, 8035, 11024, 11024, 8035, -1836, 3784};
       cos_lut[6] = '{3784, -9633, 3784, 9632, 9632, 3784, -9633, 3784};
       cos_lut[7] = '{-1836, 3784, 8035, 11024, 11024, 8035, 3784, -1836};
    end

    reg signed [31:0] temp_acc [0:7];  
    integer i, j;

    always @(posedge clk or posedge rst) begin
        if (rst) begin
            for (i = 0; i < 8; i = i + 1) begin
                row_out[i] <= 0;
                temp_acc[i] <= 0;
            end
            done <= 0;
        end else begin
            for (i = 0; i < 8; i = i + 1) begin
                temp_acc[i] = 0;  
                for (j = 0; j < 8; j = j + 1) begin
                    temp_acc[i] = temp_acc[i] + coeff[j] * cos_lut[i][j];
                end
                row_out[i] <= temp_acc[i] >>> 8; 
            end
            done <= 1;  
        end
    end
endmodule
